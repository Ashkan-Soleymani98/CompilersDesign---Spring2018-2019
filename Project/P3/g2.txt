PROGRAM -> DECLARATIONLIST eof .

DECLARATIONLIST -> DECLARATIONLIST_1 .

DECLARATIONLIST_1 -> DECLARATION DECLARATIONLIST_1 
                    |.

DECLARATION -> int Fint 
              |void Fvoid .

Fint -> id Fid_5 .

Fid_5 -> Fid_1 
        |lpar #FUNCTION_SCOPE PARAMS #DEFINE_FUNCTION rpar COMPOUNDSTMT #FUNCTION_FINISH #END_FUCTION_SCOPE.

Fvoid -> id Fid_6 .

Fid_6 -> Fid_1 
        |#FUNCTION_SCOPE lpar PARAMS #DEFINE_FUNCTION rpar COMPOUNDSTMT #FUNCTION_FINISH #END_FUCTION_SCOPE .

Fid_1 -> semi #DECLARE_VARIABLE
        |lbracket num #DECLARE_ARRAY rbracket semi .

TYPESPECIFIER -> int 
                |void .

PARAMS -> int FTYPESPECIFIER_1 PARAMLIST_1 
         |void Fvoid_1 .

Fvoid_1 -> FTYPESPECIFIER_1 PARAMLIST_1 
          | #PARAM_VOID .

PARAMLIST_1 -> comma PARAM PARAMLIST_1 
              |.

PARAM -> TYPESPECIFIER FTYPESPECIFIER_1 .

FTYPESPECIFIER_1 -> id Fid_2 .

Fid_2 -> #PARAM_VARIABLE
        |lbracket rbracket #PARAM_ARRAY .

COMPOUNDSTMT -> lakolad #NEW_SCOPE DECLARATIONLIST STATEMENTLIST #EXIT_SCOPE rakolad .

STATEMENTLIST -> STATEMENTLIST_1 .

STATEMENTLIST_1 -> STATEMENT STATEMENTLIST_1 
                  |.

STATEMENT -> EXPRESSIONSTMT 
            |COMPOUNDSTMT 
            |SELECTIONSTMT 
            |ITERATIONSTMT 
            |RETURNSTMT 
            |SWITCHSTMT .

EXPRESSIONSTMT -> EXPRESSION #POP_EXPRESSION semi 
                 |continue #CHECK_LOOP_SCOPE semi 
                 |break #CHECK_BREAK_SCOPE semi 
                 |semi .

SELECTIONSTMT -> if lpar EXPRESSION #JPF_SAVE1 rpar STATEMENT else #JP_SAVE2 #FILL_SAVE1 STATEMENT #FILL_SAVE2.

ITERATIONSTMT -> while #NEW_LOOP_SCOPE lpar #LABEL EXPRESSION #JPF_SAVE3 rpar STATEMENT #JP_LABEL #FILL_SAVE3 #EXIT_LOOP_SCOPE .

RETURNSTMT -> return Freturn .

Freturn -> semi #RETURN_NOTHING
          |EXPRESSION semi #RETURN_FUNC .

SWITCHSTMT -> switch lpar EXPRESSION rpar lakolad #NEW_BREAK_SCOPE CASESTMTS DEFAULTSTMT #EXIT_BREAK_SCOPE #POP_EXPRESSION rakolad .

CASESTMTS -> CASESTMTS_1 .

CASESTMTS_1 -> CASESTMT CASESTMTS_1 
              |.

CASESTMT -> case num #PUSH_CONSTANT2 #CMP_SAVE_CASE : STATEMENTLIST #RUN_NEXT_CASE #FILL_SAVE_CASE.

DEFAULTSTMT -> default #TWO_USELESS : STATEMENTLIST 
              | #TWO_USELESS .

EXPRESSION -> id Fid_3
             |lpar EXPRESSION rpar TERM_1 ADDITIVEEXPRESSION_1 FADDITIVEEXPRESSION 
             |num #PUSH_CONSTANT TERM_1 ADDITIVEEXPRESSION_1 FADDITIVEEXPRESSION 
             |sum FACTOR TERM_1 ADDITIVEEXPRESSION_1 FADDITIVEEXPRESSION 
             |minus FACTOR #NEGATIVE TERM_1 ADDITIVEEXPRESSION_1 FADDITIVEEXPRESSION .

Fid_3 -> Fid FFid
        |lpar #CALLEE_FUNCTION_DETECTION ARGS #PUSH_RETURN_VALUE #GET_BACK_TO_CALLER rpar TERM_1 ADDITIVEEXPRESSION_1 FADDITIVEEXPRESSION .

FFid -> mosavi Fmosavi #ASSIGN
       |* SIGNEDFACTOR #MULT TERM_1 ADDITIVEEXPRESSION_1 FADDITIVEEXPRESSION 
       |ADDOP TERM #ADD_SIGNED ADDITIVEEXPRESSION_1 FADDITIVEEXPRESSION 
       |less #SET_CONDITION_LESS ADDITIVEEXPRESSION #CHECK_CONDITION
       |mosavimosavi #SET_CONDITION_EQUAL ADDITIVEEXPRESSION #CHECK_CONDITION
       |.

Fmosavi -> EXPRESSION .

Fid -> #PUSH_ID 
      |lbracket #PUSH_ID_2 EXPRESSION #PUSH_ARRAY_ELEMENT rbracket .

FADDITIVEEXPRESSION -> RELOP ADDITIVEEXPRESSION #CHECK_CONDITION
                      |.

RELOP -> less #SET_CONDITION_LESS
        |mosavimosavi #SET_CONDITION_EQUAL.

ADDITIVEEXPRESSION -> TERM ADDITIVEEXPRESSION_1 .

ADDITIVEEXPRESSION_1 -> ADDOP TERM #ADD_SIGNED ADDITIVEEXPRESSION_1 
                       |.

ADDOP -> sum #SET_SIGN_POSITIVE
        |minus #SET_SIGN_NEGATIVE.

TERM -> SIGNEDFACTOR TERM_1 .

TERM_1 -> * SIGNEDFACTOR #MULT TERM_1 
         |.

SIGNEDFACTOR -> FACTOR 
               |sum FACTOR 
               |minus FACTOR #NEGATIVE.

FACTOR -> lpar EXPRESSION rpar 
         |id Fid_4 
         |num #PUSH_CONSTANT.

Fid_4 -> Fid 
        |lpar #CALLEE_FUNCTION_DETECTION ARGS rpar #PUSH_RETURN_VALUE #GET_BACK_TO_CALLER .

ARGS -> ARGLIST 
       |#CHECK_NUMBER_OF_ARGUMENTS #CALL .

ARGLIST -> EXPRESSION #ADD_ARGUMENT ARGLIST_1 .

ARGLIST_1 -> comma EXPRESSION #ADD_ARGUMENT ARGLIST_1 
            | #CHECK_NUMBER_OF_ARGUMENTS #CALL .